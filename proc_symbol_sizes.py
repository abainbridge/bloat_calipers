# This script parses the section size table generated by "objdump -Cx". It
# reads two such files and builds a dictionary of symbols from each. Then
# It reports on symbols that are different sizes in the two files or missing
# from one of them.

import sys

filename1 = sys.argv[1]
filename2 = sys.argv[2]


class Symbol:
    def __init__(this, flags, section_name, size):
        this.flags = flags.replace(" ", ".")
        this.section_name = section_name
        this.size = size

    def __repr__(this):
        return "%04d %7s %s" % (this.size, this.flags, this.section_name)


def parse_file(filename):
    symbols = {}

    f = open(filename)
    while f.readline() != "SYMBOL TABLE:\n":
        pass

    lines = f.readlines()
    for l in lines:
        if len(l) < 30: continue
        flags = l[9:16]
        tab_idx = l[17:].find('\t')
        section_name = l[17:17+tab_idx]
        size_idx = 18+tab_idx
        size = int(l[size_idx:size_idx+8], 16)
        symbol_name_idx = size_idx + 8 + 14
        symbol_name = l[symbol_name_idx:-1]
        symbols[symbol_name] = Symbol(flags, section_name, size)

    return symbols

      
syms1 = parse_file(filename1)
syms2 = parse_file(filename2)


def foo(syms2, syms1):
    total_size_file1 = 0
    for k,v in syms1.items():
        if v.section_name != ".text":
            continue
        if not syms2.has_key(k):
            print v,k
        total_size_file1 += v.size

    print "Total size:", total_size_file1, "bytes"
    print

    return total_size_file1


#total_size_1 = foo(syms1, syms2)
total_size_2 = foo(syms2, syms1)
#print total_size_2 - total_size_1
